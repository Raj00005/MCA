/*!
Waypoints - 4.0.1
Copyright Â© 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/

!function () {
    "use strict";

    // Waypoint constructor
    function Waypoint(options) {
        if (!options) throw new Error("No options passed to Waypoint constructor");
        if (!options.element) throw new Error("No element option passed to Waypoint constructor");
        if (!options.handler) throw new Error("No handler option passed to Waypoint constructor");

        this.key = `waypoint-${Waypoint.id}`;
        this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
        this.element = this.options.element;
        this.adapter = new Waypoint.Adapter(this.element);
        this.callback = options.handler;
        this.axis = this.options.horizontal ? "horizontal" : "vertical";
        this.enabled = this.options.enabled;
        this.triggerPoint = null;
        this.group = Waypoint.Group.findOrCreate({ name: this.options.group, axis: this.axis });
        this.context = Waypoint.Context.findOrCreateByElement(this.options.context);

        if (Waypoint.offsetAliases[this.options.offset]) {
            this.options.offset = Waypoint.offsetAliases[this.options.offset];
        }

        this.group.add(this);
        this.context.add(this);
        Waypoint.registry[this.key] = this;
        Waypoint.id += 1;
    }

    // Registry of all waypoints
    Waypoint.registry = {};
    Waypoint.id = 0;

    // Default options
    Waypoint.defaults = {
        context: window,
        continuous: true,
        enabled: true,
        group: "default",
        horizontal: false,
        offset: 0,
    };

    // Offset aliases
    Waypoint.offsetAliases = {
        "bottom-in-view": function () {
            return this.context.innerHeight() - this.adapter.outerHeight();
        },
        "right-in-view": function () {
            return this.context.innerWidth() - this.adapter.outerWidth();
        },
    };

    // Static methods
    Waypoint.invokeAll = function (methodName) {
        for (const key in Waypoint.registry) {
            Waypoint.registry[key][methodName]();
        }
    };

    Waypoint.destroyAll = function () {
        Waypoint.invokeAll("destroy");
    };

    Waypoint.disableAll = function () {
        Waypoint.invokeAll("disable");
    };

    Waypoint.enableAll = function () {
        Waypoint.Context.refreshAll();
        for (const key in Waypoint.registry) {
            Waypoint.registry[key].enabled = true;
        }
    };

    Waypoint.refreshAll = function () {
        Waypoint.Context.refreshAll();
    };

    Waypoint.viewportHeight = function () {
        return window.innerHeight || document.documentElement.clientHeight;
    };

    Waypoint.viewportWidth = function () {
        return document.documentElement.clientWidth;
    };

    // Adapter for compatibility between different environments
    Waypoint.Adapter = (function () {
        function Adapter(element) {
            this.element = element;
        }

        Adapter.prototype.on = function (eventName, handler, context) {
            if (this.element.addEventListener) {
                this.element.addEventListener(eventName, handler, context);
            } else if (this.element.attachEvent) {
                this.element.attachEvent("on" + eventName, handler);
            } else {
                this.element["on" + eventName] = handler;
            }
        };

        Adapter.prototype.off = function (eventName, handler) {
            if (this.element.removeEventListener) {
                this.element.removeEventListener(eventName, handler);
            } else if (this.element.detachEvent) {
                this.element.detachEvent("on" + eventName, handler);
            } else {
                this.element["on" + eventName] = null;
            }
        };

        Adapter.prototype.trigger = function (eventName) {
            const event = document.createEvent("HTMLEvents");
            event.initEvent(eventName, true, true);
            this.element.dispatchEvent(event);
        };

        Adapter.prototype.outerHeight = function (withScroll) {
            if (withScroll) {
                return this.element.offsetHeight + this.adapter.scrollTop();
            } else {
                return this.element.offsetHeight;
            }
        };

        Adapter.prototype.outerWidth = function (withScroll) {
            if (withScroll) {
                return this.element.offsetWidth + this.adapter.scrollLeft();
            } else {
                return this.element.offsetWidth;
            }
        };

        Adapter.prototype.scrollTop = function () {
            if (this.element === window) {
                return this.element.pageYOffset;
            } else {
                return this.element.scrollTop;
            }
        };

        Adapter.prototype.scrollLeft = function () {
            if (this.element === window) {
                return this.element.pageXOffset;
            } else {
                return this.element.scrollLeft;
            }
        };

        Adapter.prototype.offset = function () {
            if (this.element === window) {
                return { top: 0, left: 0 };
            } else {
                const box = this.element.getBoundingClientRect();
                const document = this.element.ownerDocument;
                const body = document.body;

