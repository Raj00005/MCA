/*!
  * Bootstrap v4.5.2 (https://getbootstrap.com/)
  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

// bootstrap-native.js v4.5.2
// https://github.com/hgleblanc/bootstrap-native

(function ($, window, document, undefined) {
  'use strict';

  // BOOTSTRAP

  // ALERT

  var Alert = function (element, config) {
    this._element = element;
    this._config = this._getConfig(config);
  };

  Alert.prototype.close = function (e) {
    // ...
  };

  Alert.prototype.dispose = function () {
    // ...
  };

  Alert.prototype._getConfig = function (config) {
    // ...
  };

  Alert._jQueryInterface = function (config) {
    return this.each(function () {
      var $element = $(this),
        data = $element.data('bs.alert'),
        config = $.extend({}, Alert.Default, $element.data(), typeof config === 'object' && config);

      if (!data) {
        data = new Alert(this, config);
        $element.data('bs.alert', data);
      }

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError('No method named "' + config + '"');
        }
        data[config](this);
      }
    });
  };

  Alert.Default = {
    // ...
  };

  // BUTTON

  var Button = function (element, config) {
    this._element = element;
    this._config = this._getConfig(config);
  };

  Button.prototype.toggle = function () {
    // ...
  };

  Button.prototype.dispose = function () {
    // ...
  };

  Button.prototype._getConfig = function (config) {
    // ...
  };

  Button._jQueryInterface = function (config) {
    return this.each(function () {
      var $element = $(this),
        data = $element.data('bs.button'),
        config = $.extend({}, Button.Default, $element.data(), typeof config === 'object' && config);

      if (!data) {
        data = new Button(this, config);
        $element.data('bs.button', data);
      }

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError('No method named "' + config + '"');
        }
        data[config](this);
      }
    });
  };

  Button.Default = {
    // ...
  };

  // CAROUSEL

  var Carousel = function (element, config) {
    this._element = element;
    this._config = this._getConfig(config);
    this._indicatorsElement = this._element.querySelector('.carousel-indicators');
    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);
    this._addEventListeners();
  };

  Carousel.prototype.next = function () {
    // ...
  };

  Carousel.prototype.nextWhenVisible = function () {
    // ...
  };

  Carousel.prototype.prev = function () {
    // ...
  };

  Carousel.prototype.pause = function (e) {
    // ...
  };

  Carousel.prototype.cycle = function (e) {
    // ...
  };

  Carousel.prototype.to = function (t) {
    // ...
  };

  Carousel.prototype.dispose = function () {
    // ...
  };

  Carousel.prototype._getConfig = function (config) {
    // ...
  };

  Carousel.prototype._handleSwipe = function () {
    // ...
  };

  Carousel.prototype._addEventListeners = function () {
    // ...
  };

  Carousel.prototype._addTouchEventListeners = function () {
    // ...
  };

  Carousel.prototype._keydown = function (e) {
    // ...
  };

  Carousel.prototype._getItemIndex = function (element) {
    // ...
  };

  Carousel.prototype._getItemByDirection = function (direction, currentItem) {
    // ...
  };

  Carousel.prototype._triggerSlideEvent = function (target, direction) {
    // ...
  };

  Carousel.prototype._setActiveIndicatorElement = function (target) {
    // ...
  };

  Carousel.prototype._slide = function (direction, target) {
    // ...
  };

  Carousel._jQueryInterface = function (config) {
    return this.each(function () {
      var $element = $(this),
        data = $element.data('bs.carousel'),
        config = $.extend({}, Carousel.Default, $element.data(), typeof config === 'object' && config);

      if (!data) {
        data = new Carousel(this, config);
        $element.data('bs.carousel', data);
      }

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError('No method named "' + config + '"');
        }
        data[config](this);
      }
    });
  };

  Carousel.Default = {
    // ...
  };

  // COLLAPSE

  var Collapse = function (element, config) {
    this._element =
